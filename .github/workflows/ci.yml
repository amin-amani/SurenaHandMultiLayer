name: CI Pipeline

on:
  push:
    branches: ["main"]
  pull_request:

env:
  stm32cubeIDE_path: "/opt/st/stm32cubeide_1.17.0/stm32cubeide"
  firmware_path: "${{ github.workspace }}/firmware"
  ws_path: "/home/ws/"

jobs:
  build-job:
    name: Build Firmware
    runs-on: ubuntu-latest
    container:
      image: aminamani/ubuntu-raymon:22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show STM32CubeIDE and Firmware paths
        run: |
          echo "STM32CubeIDE Path: $stm32cubeIDE_path"
          echo "Firmware Path: $firmware_path"

      - name: Build with STM32CubeIDE
        run: |
           "$stm32cubeIDE_path" \
            --launcher.suppressErrors \
            -nosplash \
            -application org.eclipse.cdt.managedbuilder.core.headlessbuild \
            -build all \
            -importAll "$firmware_path" \
            -data "$ws_path"
            cd "$firmware_path"
            mkdir build && cd build
            cmake ..
            make
            if [ -f ./test/RunAllTests ]; then ./test/RunAllTests; else echo "Test binary not found! Skipping test run."; fi
            Xvfb :99 -screen 0 1366x768x24 &
            make coverage_report | tee coverage_output.log  || echo "Coverage report target not found."
            # extract coverage inside container
            LINE_COV=$(grep "lines......:" coverage_output.log | tail -1 | awk '{print $2}')
            FUNC_COV=$(grep "functions..:" coverage_output.log | tail -1 | awk '{print $2}')
            echo "LINE_COV=${LINE_COV}" >> $GITHUB_ENV
            echo "FUNC_COV=${FUNC_COV}" >> $GITHUB_ENV
            echo "Line Coverage = ${LINE_COV}"
            echo "Function Coverage = ${FUNC_COV}"



      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-build
          path: |
            ${{ github.workspace }}/firmware/build/
      
         
      - name: Generate badge
        uses: emibcn/badge-action@v2
        with:
          label: Coverage
          status: ${{ env.COVERAGE }}
          color: green
          path: coverage-badge.svg

      - name: Commit badge
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update coverage badge"
          file_pattern: coverage-badge.svg

  coverity-scan:
    name: Coverity Scan
    runs-on: ubuntu-latest
    container:
       image: aminamani/ubuntu-raymon:22.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Build with Coverity
        run: |
          mkdir -p firmware/build
          mkdir -p firmware/lib/Unity/build
          cd firmware/lib/Unity/build
          cmake ..
          make -j$(nproc) && make install
          cd -
          cd firmware/build
          cmake ..
          /cov-analysis-linux64-2024.12.1/bin/cov-build --dir cov-int make -j$(nproc)
          tar czvf project_report.tgz cov-int
          curl --form token=${{ secrets.COVERITY_TOKEN }}      --form email=didi1364@gmail.com     --form file=@project_report.tgz      --form version="1.0"      --form description="Firmware Coverity Scan"      https://scan.coverity.com/builds?project=amin-amani/SurenaHandMultiLayer   

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverity_build
          path: |
            ${{ github.workspace }}/firmware/build/
